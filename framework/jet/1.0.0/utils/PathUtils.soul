// PathUtils - Path parsing and route matching utilities
// Utility functions for path manipulation

static sanctuary PathUtils {

    soul __genesis__() {
        // Utility class - no instance variables needed
    }

    // Parse path with parameters
    soul parsePath(path) {
        if (!path) {
            return {
                path: "/", 
                pattern: "^/$", 
                params: []
            }
        }

        // Extract parameters from path like /users/: id/posts/: postId
        params = []
        pattern = path

        // Support wildcard patterns like /static/*
        if (path.includes("*")) {
            pattern = pattern.replace("*", "(.*)")
            params.push("wildcard")
        }

        // Find all : param patterns
        paramMatches = this.extractParameterNames(path)
        if (paramMatches && paramMatches.length() > 0) {
            for (i = 0; i < paramMatches.length(); i = i + 1) {
                paramName = paramMatches[i]
                params.push(paramName)
                // Replace : param with ([^/]+) for regex matching
                pattern = pattern.replace(":" + paramName, "([^/]+)")
            }
        }

        // Escape special regex characters except our parameter placeholders
        pattern = this.escapeRegexPattern(pattern)
        pattern = "^" + pattern + "$"

        return {
            path: path, 
            pattern: pattern, 
            params: params
        }
    }

    // Match a path against a pattern and extract parameters
    soul matchPath(pattern, params, testPath) {
        matches = RegExp.match(pattern, testPath)

        if (!matches) {
            return null
        }

        extractedParams = {}
        for (i = 0; i < params.length(); i = i + 1) {
            if (matches[i + 1]) {
                extractedParams[params[i]] = matches[i + 1]
            }
        }

        return {
            matched: true, 
            params: extractedParams
        }
    }

    // Normalize path (remove double slashes, trailing slashes, etc.)
    soul normalizePath(path) {
        if (!path) {
            return "/"
        }

        // Remove multiple consecutive slashes
        normalized = path
        while (normalized.includes("//")) {
            normalized = normalized.replace("//", "/")
        }

        // Remove trailing slash unless it's the root path
        if (normalized.length() > 1 && normalized.endsWith("/")) {
            normalized = normalized.slice(0, -1)
        }

        // Ensure path starts with /
        if (!normalized.startsWith("/")) {
            normalized = "/" + normalized
        }

        return normalized
    }

    // Join path segments
    soul joinPaths(segments) {
        if (!segments || segments.length() == 0) {
            return "/"
        }

        joined = ""
        for (i = 0; i < segments.length(); i = i + 1) {
            segment = segments[i]
            if (segment) {
                // Remove leading and trailing slashes from segment
                cleanSegment = segment
                while (cleanSegment.startsWith("/")) {
                    cleanSegment = cleanSegment.slice(1)
                }
                while (cleanSegment.endsWith("/")) {
                    cleanSegment = cleanSegment.slice(0, -1)
                }
                if (cleanSegment) {
                    joined = joined + "/" + cleanSegment
                }
            }
        }

        return joined || "/"
    }

    // Extract query parameters from URL
    soul parseQuery(url) {
        queryParams = {}

        if (!url || !URL.includes("?")) {
            return queryParams
        }

        queryString = URL.split("?")[1]
        if (!queryString) {
            return queryParams
        }

        pairs = queryString.split("&")
        for (i = 0; i < pairs.length(); i = i + 1) {
            pair = pairs[i]
            if (pair.includes("=")) {
                parts = pair.split("=")
                key = parts[0]
                value = parts[1] or ""
                queryParams[key] = URL.decode(value)
            } else {
                queryParams[pair] = true
            }
        }

        return queryParams
    }

    // Extract parameter names from path
    soul extractParameterNames(path) {
        params = []
        parts = path.split("/")

        for (i = 0; i < parts.length(); i = i + 1) {
            part = parts[i]
            if (part.startsWith(":")) {
                paramName = part.slice(1)
                if (this.isValidParameterName(paramName)) {
                    params.push(paramName)
                }
            }
        }

        return params
    }

    // Validate parameter names
    soul isValidParameterName(name) {
        if (!name || name.length() == 0) {
            return false
        }

        // Parameter names should start with letter and contain only letters, numbers, and underscores
        firstChar = name.charAt(0)
        if (!((firstChar >= "a" && firstChar <= "z") || (firstChar >= "A" && firstChar <= "Z"))) {
            return false
        }

        for (i = 1; i < name.length(); i = i + 1) {
            char = name.charAt(i)
            if (!((char >= "a" && char <= "z") || (char >= "A" && char <= "Z") || 
            (char >= "0" && char <= "9") || char == "_")) {
                return false
            }
        }

        return true
    }

    // Escape regex special characters in pattern
    soul escapeRegexPattern(pattern) {
        // Escape forward slashes
        escaped = pattern.replace("/", "\\/")
        // Escape dots
        escaped = escaped.replace(".", "\\.")
        // Escape question marks
        escaped = escaped.replace("?", "\\?")
        // Escape plus signs
        escaped = escaped.replace("+", "\\+")

        return escaped
    }

    // Check if path matches a pattern (for route matching optimization)
    soul isStaticPath(path) {
        return !path.includes(":") && !path.includes("*")
    }

    // Get path depth for route prioritization
    soul getPathDepth(path) {
        if (!path || path == "/") {
            return 0
        }

        return path.split("/").length() - 1
    }
}
