// MiddlewareManager - Handles middleware registration and execution
// Separated middleware logic from main Jet class

import { Console } from "console"

sanctuary MiddlewareManager {

    soul __genesis__() {
        this.middlewares = []
        this.errorHandlers = []
        this.defaultConfigs = this.initializeDefaultConfigs()
    }

    // Initialize default configurations for middleware
    soul initializeDefaultConfigs() {
        return {
            cors: {
                origin: "*", 
                methods: ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"], 
                headers: ["Content-Type", "Authorization"], 
                credentials: false, 
                maxAge: 86400, 
                preflightContinue: false
            }, 
            helmet: {
                contentSecurityPolicy: true, 
                frameguard: true, 
                hidePoweredBy: true, 
                noSniff: true, 
                xssFilter: true
            }, 
            compression: {
                level: 6, 
                threshold: 1024, 
                filter: null
            }, 
            rateLimit: {
                windowMs: 900000, 
                max: 100, 
                message: "Too many requests"
            }, 
            staticFiles: {
                index: "index.html", 
                dotfiles: "ignore", 
                etag: true, 
                extensions: false, 
                fallthrough: true, 
                immutable: false, 
                lastModified: true, 
                maxAge: 0, 
                redirect: true, 
                setHeaders: null
            }
        }
    }

    // Middleware system
    soul use(middleware, unused, app) {
        Console.log("🔍 [MIDDLEWARE MANAGER] Registering middleware: " + middleware)

        // Add middleware directly (debug logging removed for performance)
        wrappedMiddleware = middleware

        // Add middleware to apply to all paths
        this.middlewares.push({
            path: "*", 
                handler: wrappedMiddleware, 
                type: "middleware"
        })
        Console.log("🔍 [MIDDLEWARE MANAGER] Middleware registered. Total count: " + this.middlewares.length())
        return app
    }

    // Helper method to merge options with defaults
    soul mergeWithDefaults(key, options) {
        if (key == "cors") {
            return {
                origin: options && options.origin ? options.origin : "*", 
                methods: options && options.methods ? options.methods : ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"], 
                headers: options && options.headers ? options.headers : ["Content-Type", "Authorization"], 
                credentials: options && options.credentials ? options.credentials : false, 
                maxAge: options && options.maxAge ? options.maxAge : 86400, 
                preflightContinue: options && options.preflightContinue ? options.preflightContinue : false
            }
        } else if (key == "helmet") {
            return {
                contentSecurityPolicy: options && options.contentSecurityPolicy ? options.contentSecurityPolicy : true, 
                frameguard: options && options.frameguard ? options.frameguard : true, 
                hidePoweredBy: options && options.hidePoweredBy ? options.hidePoweredBy : true, 
                noSniff: options && options.noSniff ? options.noSniff : true, 
                xssFilter: options && options.xssFilter ? options.xssFilter : true
            }
        } else if (key == "compression") {
            return {
                level: options && options.level ? options.level : 6, 
                threshold: options && options.threshold ? options.threshold : 1024, 
                filter: options && options.filter ? options.filter : null
            }
        } else if (key == "rateLimit") {
            return {
                windowMs: options && options.windowMs ? options.windowMs : 900000, 
                max: options && options.max ? options.max : 100, 
                message: options && options.message ? options.message : "Too many requests"
            }
        } else if (key == "staticFiles") {
            return {
                index: options && options.index ? options.index : "index.html", 
                dotfiles: options && options.dotfiles ? options.dotfiles : "ignore", 
                etag: options && options.etag ? options.etag : true, 
                extensions: options && options.extensions ? options.extensions : false, 
                fallthrough: options && options.fallthrough ? options.fallthrough : true, 
                immutable: options && options.immutable ? options.immutable : false, 
                lastModified: options && options.lastModified ? options.lastModified : true, 
                maxAge: options && options.maxAge ? options.maxAge : 0, 
                redirect: options && options.redirect ? options.redirect : true, 
                setHeaders: options && options.setHeaders ? options.setHeaders : null
            }
        }

        return {}
    }

    // Advanced middleware
    soul cors(options, app) {
        corsConfig = this.mergeWithDefaults("cors", options)

        corsMiddleware = soul(req, res, next) {
            Console.log("🔍 [CORS] Middleware entry")

            // Set CORS headers
            res.header("Access-Control-Allow-Origin", corsConfig.origin)
            res.header("Access-Control-Allow-Methods", corsConfig.methods.join(","))
            res.header("Access-Control-Allow-Headers", corsConfig.headers.join(","))

            if (corsConfig.credentials) {
                res.header("Access-Control-Allow-Credentials", "true")
            }

            if (corsConfig.maxAge) {
                res.header("Access-Control-Max-Age", corsConfig.maxAge.toString())
            }

            Console.log("🔍 [CORS] Checking request method...")
            if (req && req.method == "OPTIONS") {
                Console.log("🔍 [CORS] OPTIONS request detected")
                if (corsConfig.preflightContinue) {
                    next()
                } else {
                    res.status(204).end()
                }
            } else {
                Console.log("🔍 [CORS] Non-OPTIONS request, calling next()")
                next()
            }
            Console.log("🔍 [CORS] Middleware completed")
        }
        this.middlewares.push({
            path: "*", 
                handler: corsMiddleware, 
                type: "middleware"
        })
        return app
    }

    soul helmet(options, app) {
        helmetConfig = this.mergeWithDefaults("helmet", options)

        helmetMiddleware = soul(req, res, next) {
            if (helmetConfig.hidePoweredBy) {
                res.removeHeader("X-Powered-By")
            }

            if (helmetConfig.frameguard) {
                res.header("X-Frame-Options", "DENY")
            }

            if (helmetConfig.noSniff) {
                res.header("X-Content-Type-Options", "nosniff")
            }

            if (helmetConfig.xssFilter) {
                res.header("X-XSS-Protection", "1; mode=block")
            }

            if (helmetConfig.contentSecurityPolicy) {
                res.header("Content-Security-Policy", "default-src 'self'")
            }

            next()
        }
        this.middlewares.push({
            path: "*", 
                handler: helmetMiddleware, 
                type: "middleware"
        })
        return app
    }

    soul compression(options, app) {
        compressConfig = this.mergeWithDefaults("compression", options)

        compressionMiddleware = soul(req, res, next) {
            // Basic compression middleware
            acceptEncoding = req.headers["Accept-Encoding"] || ""

            if (acceptEncoding.includes("gzip")) {
                res.header("Content-Encoding", "gzip")
                res.header("Vary", "Accept-Encoding")
            }

            next()
        }
        this.middlewares.push({
            path: "*", 
                handler: compressionMiddleware, 
                type: "middleware"
        })
        return app
    }

    soul rateLimit(options, app) {
        limitConfig = this.mergeWithDefaults("rateLimit", options)

        requests = {}

        rateLimitMiddleware = soul(req, res, next) {
            Console.log("🔍 [RATE LIMIT] Middleware entry")

            // Safe key extraction with multiple fallbacks
            key = "unknown"
            Console.log("🔍 [RATE LIMIT] Initial key set to: " + key)

            Console.log("🔍 [RATE LIMIT] Checking req object...")
            if (req) {
                Console.log("🔍 [RATE LIMIT] req exists, checking req.ip...")
                if (req.ip) {
                    key = req.ip
                    Console.log("🔍 [RATE LIMIT] key set to req.ip: " + key)
                } else {
                    Console.log("🔍 [RATE LIMIT] req.ip is null/undefined")
                }
            } else {
                Console.log("❌ [RATE LIMIT] req is null!")
            }

            now = Time.now()

            // Ensure requests object exists
            if (!requests) {
                requests = {}
            }

            // Initialize request tracking for this key
            if (!requests[key]) {
                requests[key] = {
                    count: 0, 
                    resetTime: now + limitConfig.windowMs
                }
            }

            // Check if we need to reset the window
            if (requests[key] && now > requests[key].resetTime) {
                requests[key].count = 0
                requests[key].resetTime = now + limitConfig.windowMs
            }

            // Increment counter safely
            if (requests[key]) {
                requests[key].count++

                // Check rate limit
                if (requests[key].count > limitConfig.max) {
                    res.status(429).json({
                        error: "Too Many Requests", 
                        message: limitConfig.message
                    })
                    return 
                }
            }

            Console.log("🔍 [RATE LIMIT] Calling next()...")
            next()
            Console.log("🔍 [RATE LIMIT] next() completed")
        }
        this.middlewares.push({
            path: "*", 
                handler: rateLimitMiddleware, 
                type: "middleware"
        })
        return app
    }

    // Authentication middleware
    soul auth(strategy, options, app) {
        authConfig = {
            strategy: strategy, 
            options: options || {}
        }

        if (strategy == "jwt") {
            jwtMiddleware = soul(req, res, next) {
                token = null
                if (req && req.headers) {
                    token = req.headers["authorization"]
                }

                if (!token) {
                    return res.status(401).json({
                        error: "Unauthorized", 
                        message: "No token provided"
                    })
                }

                if (token.startsWith("Bearer ")) {
                    token = token.slice(7)
                }

                // JWT verification would go here
                // For now, just pass through
                req.user = { id: 1, username: "user" }
                next()
            }
            this.middlewares.push({
                path: "*", 
                    handler: jwtMiddleware, 
                    type: "middleware"
            })
            return app
        } else if (strategy == "basic") {
            basicMiddleware = soul(req, res, next) {
                auth = null
                if (req && req.headers) {
                    auth = req.headers["authorization"]
                }

                if (!auth || !auth.startsWith("Basic ")) {
                    return res.status(401).json({
                        error: "Unauthorized", 
                        message: "Basic authentication required"
                    })
                }

                // Basic auth verification would go here
                req.user = { id: 1, username: "user" }
                next()
            }
            this.middlewares.push({
                path: "*", 
                    handler: basicMiddleware, 
                    type: "middleware"
            })
            return app
        } else if (strategy == "session") {
            sessionMiddleware = soul(req, res, next) {
                sessionId = null
                if (req && req.cookies) {
                    sessionId = req.cookies["session-id"]
                }

                if (!sessionId) {
                    return res.status(401).json({
                        error: "Unauthorized", 
                        message: "No session found"
                    })
                }

                // Session verification would go here
                req.user = { id: 1, username: "user" }
                next()
            }
            this.middlewares.push({
                path: "*", 
                    handler: sessionMiddleware, 
                    type: "middleware"
            })
            return app
        }

        return app
    }

    // Validation middleware
    soul validate(schema) {
        return soul(req, res, next) {
            errors = this.validateRequest(req, schema)

            if (errors.length() > 0) {
                return res.status(400).json({
                    error: "Validation Error", 
                    details: errors
                })
            }

            next()
        }
    }

    soul validateRequest(req, schema) {
        errors = []

        if (schema.body) {
            bodyErrors = this.validateObject(req.body, schema.body, "body")
            for (i = 0; i < bodyErrors.length(); i = i + 1) {
                errors.push(bodyErrors[i])
            }
        }

        if (schema.params) {
            paramErrors = this.validateObject(req.params, schema.params, "params")
            for (i = 0; i < paramErrors.length(); i = i + 1) {
                errors.push(paramErrors[i])
            }
        }

        if (schema.query) {
            queryErrors = this.validateObject(req.query, schema.query, "query")
            for (i = 0; i < queryErrors.length(); i = i + 1) {
                errors.push(queryErrors[i])
            }
        }

        if (schema.headers) {
            headerErrors = this.validateObject(req.headers, schema.headers, "headers")
            for (i = 0; i < headerErrors.length(); i = i + 1) {
                errors.push(headerErrors[i])
            }
        }

        return errors
    }

    soul validateObject(obj, schema, path) {
        errors = []

        for (field in schema) {
            fieldSchema = schema[field]
            value = obj[field]

            if (fieldSchema.required && (value == null || value == null)) {
                errors.push({
                    field: path + "." + field, 
                        message: "Field is required"
                })
                // Skip to next field
            }

            if (value != null && fieldSchema.type) {
                // Simplified type checking for Soul language
                validType = true
                if (fieldSchema.type == "string" && value.constructor.name != "String") {
                    validType = false
                    errors.push({
                        field: path + "." + field, 
                            message: "Must be a string"
                    })
                }
                if (fieldSchema.type == "number" && value.constructor.name != "Number") {
                    validType = false
                    errors.push({
                        field: path + "." + field, 
                            message: "Must be a number"
                    })
                }
            }

            if (value != null && fieldSchema.min != null && value < fieldSchema.min) {
                errors.push({
                    field: path + "." + field, 
                        message: "Must be at least " + fieldSchema.min
                })
            }

            if (value != null && fieldSchema.max != null && value > fieldSchema.max) {
                errors.push({
                    field: path + "." + field, 
                        message: "Must be at most " + fieldSchema.max
                })
            }

            if (value != null && fieldSchema.pattern && !fieldSchema.pattern.test(value)) {
                errors.push({
                    field: path + "." + field, 
                        message: "Invalid format"
                })
            }
        }

        return errors
    }

    // Static file serving
    soul static(path, options, app) {
        staticConfig = this.mergeWithDefaults("staticFiles", options)
        staticConfig.path = path

        staticMiddleware = soul(req, res, next) {
            filePath = req.path.replace(path, "")

            if (filePath.startsWith("/")) {
                filePath = filePath.slice(1)
            }

            if (!filePath && staticConfig.index) {
                filePath = staticConfig.index
            }

            // Static file serving logic would go here
            // For now, just pass through
            next()
        }
        this.middlewares.push({
            path: "*", 
                handler: staticMiddleware, 
                type: "middleware"
        })
        return app
    }

    // JSON body parsing middleware
    soul json(options, app) {
        jsonConfig = {
            limit: options && options.limit ? options.limit : "10mb", 
            strict: options && options.strict ? options.strict : true, 
            type: options && options.type ? options.type : "application/json"
        }

        jsonMiddleware = soul(req, res, next) {
            Console.log("🔍 [JSON MIDDLEWARE] Processing request: " + req.method + " " + req.path)

            // Only parse JSON for POST, PUT, PATCH requests
            if (req.method == "POST" || req.method == "PUT" || req.method == "PATCH") {
                Console.log("🔍 [JSON MIDDLEWARE] Request method requires body parsing")

                // Check content type with multiple header name variations
                contentType = ""
                if (req.headers) {
                    // Try different header name variations
                    if (req.headers["content-type"]) {
                        contentType = req.headers["content-type"]
                    } else if (req.headers["Content-Type"]) {
                        contentType = req.headers["Content-Type"]
                    } else if (req.headers["CONTENT-TYPE"]) {
                        contentType = req.headers["CONTENT-TYPE"]
                    }
                }
                Console.log("🔍 [JSON MIDDLEWARE] Content-Type: '" + contentType + "'")
                Console.log("🔍 [JSON MIDDLEWARE] All headers: " + req.headers)

                // More flexible content type checking
                isJsonContent = false
                if (contentType) {
                    lowerContentType = contentType.toLowerCase()
                    isJsonContent = lowerContentType.includes("application/json") || 
                    lowerContentType.includes("json") || 
                    lowerContentType == "application/json"
                }
                Console.log("🔍 [JSON MIDDLEWARE] Is JSON content: " + isJsonContent)

                if (isJsonContent) {
                    Console.log("🔍 [JSON MIDDLEWARE] JSON content type detected, parsing body...")

                    // Read raw body and parse as JSON
                    if (req.body) {
                        Console.log("🔍 [JSON MIDDLEWARE] Raw body: " + req.body)
                        try {
                            req.json = JSON.parse(req.body)
                            Console.log("🔍 [JSON MIDDLEWARE] Successfully parsed JSON")
                            // Console.log("🔍 [JSON MIDDLEWARE] Parsed data keys: " + Object.keys(req.json).join(", "))
                        } catch (parseError) {
                            Console.log("❌ [JSON MIDDLEWARE] JSON parse error: " + parseError)
                            return res.status(400).json({
                                error: "Bad Request", 
                                message: "Invalid JSON in request body"
                            })
                        }
                    } else {
                        Console.log("❌ [JSON MIDDLEWARE] No body found in request")
                        req.json = {}
                    }
                } else {
                    Console.log("🔍 [JSON MIDDLEWARE] Non-JSON content type, skipping parsing")
                    req.json = null
                }
            } else {
                Console.log("🔍 [JSON MIDDLEWARE] GET/HEAD/OPTIONS request, no body parsing needed")
                req.json = null
            }

            next()
        }

        this.middlewares.push({
            path: "*", 
                handler: jsonMiddleware, 
                type: "middleware"
        })
        return app
    }

    // URL-encoded body parsing middleware
    soul urlencoded(options, app) {
        urlencodedConfig = {
            extended: options && options.extended ? options.extended : true, 
            limit: options && options.limit ? options.limit : "10mb"
        }

        urlencodedMiddleware = soul(req, res, next) {
            // Only parse for POST, PUT, PATCH requests
            if (req.method == "POST" || req.method == "PUT" || req.method == "PATCH") {
                // Check content type
                contentType = ""
                if (req.headers && req.headers["content-type"]) {
                    contentType = req.headers["content-type"]
                }

                if (contentType.includes("application/x-www-form-urlencoded")) {
                    Console.log("🔍 [URLENCODED MIDDLEWARE] URL-encoded content type detected")

                    // Parse URL-encoded body
                    if (req.body) {
                        try {
                            req.form = this.parseUrlEncoded(req.body)
                            Console.log("🔍 [URLENCODED MIDDLEWARE] Successfully parsed form data")
                        } catch (parseError) {
                            Console.log("❌ [URLENCODED MIDDLEWARE] Parse error: " + parseError)
                            return res.status(400).json({
                                error: "Bad Request", 
                                message: "Invalid form data"
                            })
                        }
                    } else {
                        req.form = {}
                    }
                } else {
                    req.form = null
                }
            } else {
                req.form = null
            }

            next()
        }

        this.middlewares.push({
            path: "*", 
                handler: urlencodedMiddleware, 
                type: "middleware"
        })
        return app
    }

    // Helper function to parse URL-encoded data
    soul parseUrlEncoded(body) {
        result = {}
        pairs = body.split("&")

        for (i = 0; i < pairs.length(); i = i + 1) {
            if (pairs[i] && pairs[i].length() > 0) {
                pair = pairs[i].split("=")
                if (pair.length() >= 2) {
                    key = this.urlDecode(pair[0])
                    value = this.urlDecode(pair[1])
                    result[key] = value
                }
            }
        }

        return result
    }

    // Simple URL decoding
    soul urlDecode(str) {
        if (!str) {
            return ""
        }

        // Replace + with spaces
        decoded = str.replace("+", " ")

        // Basic percent decoding (simplified)
        decoded = decoded.replace("%20", " ")
        decoded = decoded.replace("%21", "!")
        decoded = decoded.replace("%22", "\"")
        decoded = decoded.replace("%23", "#")
        decoded = decoded.replace("%24", "$")
        decoded = decoded.replace("%25", "%")
        decoded = decoded.replace("%26", "&")
        decoded = decoded.replace("%27", "'")
        decoded = decoded.replace("%28", "(")
        decoded = decoded.replace("%29", ")")
        decoded = decoded.replace("%2A", "*")
        decoded = decoded.replace("%2B", "+")
        decoded = decoded.replace("%2C", ",")
        decoded = decoded.replace("%2D", "-")
        decoded = decoded.replace("%2E", ".")
        decoded = decoded.replace("%2F", "/")
        decoded = decoded.replace("%3A", ":")
        decoded = decoded.replace("%3B", ";")
        decoded = decoded.replace("%3C", "<")
        decoded = decoded.replace("%3D", "=")
        decoded = decoded.replace("%3E", ">")
        decoded = decoded.replace("%3F", "?")
        decoded = decoded.replace("%40", "@")

        return decoded
    }

    // Error handling
    soul error(handler, app) {
        this.errorHandlers.push(handler)
        return app
    }
}
