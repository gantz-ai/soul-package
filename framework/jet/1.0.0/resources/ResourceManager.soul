// Resource Manager - Handles copying of resource directories

import { Console } from "console"

sanctuary ResourceManager {
    soul __genesis__(app) {
        this.app = app
    }

    // Register and copy resource directories
    soul register(directories) {
        try {
            // Get current working directory (project source location)
            projectDir = os.cwd()
            this.app.logger.info("Project directory: " + projectDir)

            // Adjust project directory if we're running from the Soul root
            if (projectDir.endsWith("soul-lang")) {
                projectDir = os.joinPath(projectDir, "sample_projects", "jet-server")
                this.app.logger.info("Adjusted project directory: " + projectDir)
            }

            // Get executable directory (temporary location)
            execDir = os.executableDir()
            this.app.logger.info("Executable directory: " + execDir)

            for (dirName in directories) {
                destPath = os.joinPath(execDir, dirName)
                sourcePath = os.joinPath(projectDir, dirName)

                this.app.logger.debug("Checking directory: " + dirName)

                if (os.exists(destPath)) {
                    this.app.logger.info("Removing old directory: " + destPath)
                    try {
                        os.removeDir(destPath)
                        this.app.logger.info("Directory removed successfully")
                    } catch (error) {
                        this.app.logger.error("Error removing directory: " + error)
                    }
                }

                if (os.exists(sourcePath)) {
                    this.app.logger.info("Copying " + dirName + ": " + sourcePath + " -> " + destPath)
                    try {
                        os.copyDir(sourcePath, destPath)
                        this.app.logger.info(dirName + " copied successfully")
                        if (!os.exists(destPath)) {
                            this.app.logger.error(dirName + " destination does not exist after copy!")
                        }
                    } catch (error) {
                        this.app.logger.error("Error copying " + dirName + ": " + error)
                    }
                } else {
                    this.app.logger.warn("Source does not exist for " + dirName + ": " + sourcePath)
                }
            }
        } catch (error) {
            this.app.logger.error("Directory resource registration failed: " + error)
        }
        return this.app // for chaining
    }

    // Enhanced static file serving
    soul static(urlPath, localPath) {
        // Ensure server is created before registering static files
        if (!this.app.server) {
            this.app.server = http.createServer(this.app.port)
        }
        
        // Pass the path through - the web server will resolve it
        resolvedPath = localPath
        
        // Simple default options
        options = {
            index: ["index.html", "index.htm"],
            dotfiles: "ignore",
            etag: true,
            extensions: ["html", "htm"],
            fallthrough: true,
            immutable: false,
            lastModified: true,
            maxAge: 0,
            redirect: true,
            setHeaders: null
        }
        
        // Register wildcard route for static files
        staticUrlPath = urlPath
        
        // If path already has /*, use it as-is
        // If path ends with *, convert to /* 
        // If path has no wildcard, add /*
        if (staticUrlPath.includes("/*")) {
            // Path already has /* wildcard
        } else if (staticUrlPath.charAt(staticUrlPath.length() - 1) == "*") {
            staticUrlPath = staticUrlPath.substring(0, staticUrlPath.length() - 1) + "/*"
        } else {
            staticUrlPath = staticUrlPath + "/*"
        }
        
        console.log("‚úÖ Registering static route: " + staticUrlPath + " -> " + resolvedPath)
        
        // Register with Soul's web server for static file handling
        // Use the original path (without wildcard) for Soul's static method
        cleanPath = urlPath
        if (cleanPath.endsWith("/*")) {
            cleanPath = cleanPath.substring(0, cleanPath.length() - 2)
        }
        
        try {
            if (this.app.server && this.app.server.static) {
                this.app.server.static(cleanPath, resolvedPath)
            }
        } catch (error) {
            console.log("‚ùå Error calling server.static(): " + error)
        }
        
        // Also register with Jet router as fallback
        this.app.get(staticUrlPath, soul(req, res) {
            console.log("üéØ Static file request matched: " + req.path + " via pattern: " + staticUrlPath)
            this.serveStaticFile(req, res, urlPath, resolvedPath, options)
        })
        
        // Also add debugging to see what patterns we're registering
        
        return this.app
    }
    
    // Static file serving implementation
    soul serveStaticFile(req, res, urlPath, localPath, options) {
        try {
            requestPath = req.path
            
            // Remove URL prefix to get relative file path
            if (requestPath.startsWith(urlPath)) {
                relativePath = requestPath.substring(urlPath.length())
                
                // Remove leading slash
                if (relativePath.startsWith("/")) {
                    relativePath = relativePath.substring(1)
                }
            } else {
                relativePath = requestPath
            }
            
            // Security: prevent directory traversal
            if (relativePath.includes("..") || relativePath.includes("~")) {
                console.log("‚ùå Directory traversal blocked: " + relativePath)
                res.status(403).send("Forbidden")
                return
            }
            
            // Construct full file path
            fullPath = localPath + "/" + relativePath
            
            console.log("üìÑ Serving: " + requestPath + " -> " + fullPath)
            
            // Read file
            content = io.read(fullPath)
            
            // Get file extension and MIME type
            extension = this.getFileExtension(relativePath)
            mimeType = this.getMimeType(extension)
            
            // Set headers
            res.header("Content-Type", mimeType)
            
            // Cache headers based on environment
            if (this.app.settings.env == "development") {
                res.header("Cache-Control", "no-cache, no-store, must-revalidate")
                res.header("Pragma", "no-cache")
                res.header("Expires", "0")
            } else {
                res.header("Cache-Control", "public, max-age=31536000")
                res.header("ETag", '"' + content.length() + '"')
            }
            
            // Security headers
            res.header("X-Content-Type-Options", "nosniff")
            
            res.send(content)
            
        } catch (error) {
            console.log("‚ùå Static file error: " + error)
            res.status(404).send("Not Found")
        }
    }
    
    // Helper to get file extension
    soul getFileExtension(filePath) {
        if (!filePath || filePath.length() == 0) {
            return ""
        }
        
        lastDotIndex = filePath.lastIndexOf(".")
        if (lastDotIndex == -1) {
            return ""
        }
        
        return filePath.substring(lastDotIndex + 1).toLowerCase()
    }
    
    // Helper to get MIME type
    soul getMimeType(extension) {
        mimeTypes = {
            "css": "text/css; charset=utf-8",
            "js": "application/javascript; charset=utf-8",
            "html": "text/html; charset=utf-8",
            "htm": "text/html; charset=utf-8",
            "json": "application/json; charset=utf-8",
            "png": "image/png",
            "jpg": "image/jpeg",
            "jpeg": "image/jpeg",
            "gif": "image/gif",
            "svg": "image/svg+xml",
            "ico": "image/x-icon",
            "webp": "image/webp",
            "woff": "font/woff",
            "woff2": "font/woff2",
            "ttf": "font/ttf",
            "otf": "font/otf",
            "txt": "text/plain; charset=utf-8",
            "pdf": "application/pdf",
            "zip": "application/zip"
        }
        
        if (mimeTypes[extension]) {
            return mimeTypes[extension]
        }
        
        return "application/octet-stream"
    }
}
