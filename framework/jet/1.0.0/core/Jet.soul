// Core Jet Framework Class
// Main application class with essential functionality

import { Console } from "console"
import { Router } from "../router/Router.soul"
import { MiddlewareManager } from "../middleware/MiddlewareManager.soul"
import { ControllerManager } from "../controller/ControllerManager.soul"
import { ResourceManager } from "../resources/ResourceManager.soul"
import { HtmlRenderer } from "../utils/HtmlRenderer.soul"

sanctuary Jet {

    soul __genesis__(port) {
        if (port) {
            this.port = port
        } else {
            this.port = 8888
        }

        // Core properties
        this.server = null
        this.startTime = null

        // Component managers
        this.router = Router.new()
        this.middlewareManager = MiddlewareManager.new()
        this.htmlRenderer = HtmlRenderer()
        this.controllerManager = ControllerManager.new(this)
        this.resourceManager = ResourceManager.new(this)

        // Settings
        this.settings = {
            env: "development", 
            trustProxy: false, 
            jsonLimit: "10mb", 
            urlEncoded: true
        }

        // Enhanced architecture components
        this.controllers = {}
        this.services = {}
        this.repositories = {}
        this.models = {}
        this.config = {}

        // Performance tracking
        this.performance = {
            startTime: 0, 
            requests: 0, 
            errors: 0, 
            avgResponseTime: 0
        }

        // Initialize logger
        this.initializeLogger()
    }

    // Initialize logger
    soul initializeLogger() {
        this.logger = {
            info: soul(message) { Console.log("[INFO] " + message) }, 
            warn: soul(message) { Console.log("[WARN] " + message) }, 
            error: soul(message) { Console.log("[ERROR] " + message) }, 
            debug: soul(message) {
                if (this.settings.env == "development") {
                    Console.log("[DEBUG] " + message)
                }
            }
        }
    }

    // Configuration methods
    soul set(key, value) {
        this.settings[key] = value
        return this
    }

    soul get(key) {
        return this.settings[key]
    }

    // Method to set start time
    soul setStartTime(timestamp) {
        this.startTime = timestamp
        return this
    }

    soul env(environment) {
        this.settings.env = environment
        return this
    }

    soul trust(proxy) {
        this.settings.trustProxy = proxy
        return this
    }

    // View engine configuration
    soul setViewsPath(path) {
        // Always try to resolve to executable directory first
        execDir = os.executableDir()
        execRelativePath = os.joinPath(execDir, path)

        resolvedPath = path
        if (os.exists(execRelativePath)) {
            resolvedPath = execRelativePath
        }

        this.htmlRenderer.setViewsPath(resolvedPath)
        return this
    }

    soul setDefaultLayout(layout) {
        this.htmlRenderer.setDefaultLayout(layout)
        return this
    }

    soul enableViewCache(enable) {
        this.htmlRenderer.enableCache(enable)
        return this
    }

    soul helper(name, helperFunction) {
        this.htmlRenderer.helper(name, helperFunction)
        return this
    }

    // Enhanced architecture registration methods
    soul registerController(name, controller) {
        return this.controllerManager.register(name, controller)
    }

    soul registerService(name, service) {
        this.services[name] = service
        if (service.setApp) {
            service.setApp(this)
        }
        return this
    }

    soul registerRepository(name, repository) {
        this.repositories[name] = repository
        if (repository.setApp) {
            repository.setApp(this)
        }
        return this
    }

    soul registerModel(name, model) {
        this.models[name] = model
        return this
    }

    soul getController(name) {
        return this.controllerManager.get(name)
    }

    soul getService(name) {
        if (!this.services) {
            return null
        }
        return this.services[name]
    }

    soul getRepository(name) {
        return this.repositories[name]
    }

    soul getModel(name) {
        return this.models[name]
    }

    soul registerResources(directories) {
        return this.resourceManager.register(directories)
    }

    // Middleware delegation
    soul use(middleware) {
        return this.middlewareManager.use(middleware, null, this)
    }

    // Advanced middleware methods
    soul cors(options) {
        return this.middlewareManager.cors(options, this)
    }

    soul helmet(options) {
        return this.middlewareManager.helmet(options, this)
    }

    soul compression(options) {
        return this.middlewareManager.compression(options, this)
    }

    soul rateLimit(options) {
        return this.middlewareManager.rateLimit(options, this)
    }

    soul auth(strategy, options) {
        return this.middlewareManager.auth(strategy, options, this)
    }

    soul json(options) {
        return this.middlewareManager.json(options, this)
    }

    soul urlencoded(options) {
        return this.middlewareManager.urlencoded(options, this)
    }

    // Enhanced static file serving
    soul static(urlPath, localPath) {
        return this.resourceManager.static(urlPath, localPath)
    }

    soul error(handler) {
        return this.middlewareManager.error(handler, this)
    }

    // Route delegation
    soul route(method, path, handlers) {
        return this.router.route(method, path, handlers, this)
    }

    // HTTP method shortcuts
    soul get(path, handlers) {
        return this.route("GET", path, handlers)
    }

    soul post(path, handlers) {
        return this.route("POST", path, handlers)
    }

    soul put(path, handlers) {
        return this.route("PUT", path, handlers)
    }

    soul patch(path, handlers) {
        return this.route("PATCH", path, handlers)
    }

    soul delete(path, handlers) {
        return this.route("DELETE", path, handlers)
    }

    soul options(path, handlers) {
        return this.route("OPTIONS", path, handlers)
    }

    soul head(path, handlers) {
        return this.route("HEAD", path, handlers)
    }

    soul all(path, handlers) {
        methods = ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "HEAD"]
        for (i = 0; i < methods.length(); i = i + 1) {
            this.route(methods[i], path, handlers)
        }
        return this
    }

    // Template rendering helper
    soul render(templateName, data, options) {
        return this.htmlRenderer.render(templateName, data, options)
    }

    soul renderString(template, data) {
        return this.htmlRenderer.renderString(template, data)
    }

    // Enhanced routing with controller integration
    soul controller(controllerName, methodName) {
        return this.controllerManager.createHandler(controllerName, methodName)
    }

    // Server lifecycle
    soul listen(callback) {
        // Use existing server if created, otherwise create new one
        if (!this.server) {
            this.server = HTTP.createServer(this.port)
        }
        app = this

        // Register routes directly with the HTTP server
        this.router.registerRoutes(this.server)

        if (callback) {
            callback()
        }

        // Start server and keep it running (this blocks)
        this.server.listen()

        return this
    }

    // Health check
    soul health() {
        return {
            status: "healthy", 
            uptime: now() - this.startTime, 
            requests: this.performance.requests, 
            errors: this.performance.errors, 
            avgResponseTime: this.performance.avgResponseTime, 
            version: "1.0.0"
        }
    }
}

// Factory function to create Jet instances
soul createJet(port) {
    return Jet.new(port)
}
