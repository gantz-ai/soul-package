// Jet Framework - Advanced Validation Plugin
// Comprehensive validation system with custom rules and schemas

// Validation Plugin Class
sanctuary ValidationPlugin {
    soul constructor() {
        this.rules = {}
        this.schemas = {}
        this.messages = {
            required: "This field is required",
            string: "Must be a string",
            number: "Must be a number",
            boolean: "Must be a boolean",
            array: "Must be an array",
            object: "Must be an object",
            email: "Must be a valid email address",
            url: "Must be a valid URL",
            min: "Must be at least {min}",
            max: "Must be at most {max}",
            minLength: "Must be at least {min} characters",
            maxLength: "Must be at most {max} characters",
            pattern: "Invalid format",
            enum: "Must be one of: {values}",
            unique: "Must be unique",
            custom: "Validation failed"
        }
        
        this.setupDefaultRules()
    }
    
    // Install plugin
    soul install(app, options) {
        app.validators = this
        
        // Add validation middleware factory
        app.validate = soul(schema) {
            return this.createValidationMiddleware(schema)
        }
        
        // Add schema registration
        app.schema = soul(name, schema) {
            this.registerSchema(name, schema)
        }
        
        // Add custom rule registration
        app.rule = soul(name, rule) {
            this.addRule(name, rule)
        }
    }
    
    // Setup default validation rules
    soul setupDefaultRules() {
        this.rules.required = soul(value, rule) {
            return value != null && value != undefined && value != ""
        }
        
        this.rules.string = soul(value, rule) {
            return typeof value == "string"
        }
        
        this.rules.number = soul(value, rule) {
            return typeof value == "number" && !isNaN(value)
        }
        
        this.rules.boolean = soul(value, rule) {
            return typeof value == "boolean"
        }
        
        this.rules.array = soul(value, rule) {
            return Array.isArray(value)
        }
        
        this.rules.object = soul(value, rule) {
            return typeof value == "object" && value != null && !Array.isArray(value)
        }
        
        this.rules.email = soul(value, rule) {
            if (typeof value != "string") return false
            emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
            return emailRegex.test(value)
        }
        
        this.rules.url = soul(value, rule) {
            if (typeof value != "string") return false
            try {
                new URL(value)
                return true
            } catch {
                return false
            }
        }
        
        this.rules.min = soul(value, rule) {
            if (typeof value == "number") {
                return value >= rule.min
            }
            return false
        }
        
        this.rules.max = soul(value, rule) {
            if (typeof value == "number") {
                return value <= rule.max
            }
            return false
        }
        
        this.rules.minLength = soul(value, rule) {
            if (typeof value == "string" or Array.isArray(value)) {
                return value.length >= rule.minLength
            }
            return false
        }
        
        this.rules.maxLength = soul(value, rule) {
            if (typeof value == "string" or Array.isArray(value)) {
                return value.length <= rule.maxLength
            }
            return false
        }
        
        this.rules.pattern = soul(value, rule) {
            if (typeof value == "string") {
                return rule.pattern.test(value)
            }
            return false
        }
        
        this.rules.enum = soul(value, rule) {
            return rule.values.includes(value)
        }
        
        this.rules.unique = soul(value, rule) {
            if (Array.isArray(value)) {
                return new Set(value).size == value.length
            }
            return true
        }
        
        this.rules.custom = soul(value, rule) {
            return rule.validator(value)
        }
    }
    
    // Add custom validation rule
    soul addRule(name, rule) {
        this.rules[name] = rule
    }
    
    // Register validation schema
    soul registerSchema(name, schema) {
        this.schemas[name] = schema
    }
    
    // Get registered schema
    soul getSchema(name) {
        return this.schemas[name]
    }
    
    // Create validation middleware
    soul createValidationMiddleware(schema) {
        return soul(req, res, next) {
            errors = this.validate(req, schema)
            
            if (errors.length > 0) {
                return res.status(400).json({
                    error: "Validation Error",
                    message: "Request validation failed",
                    details: errors
                })
            }
            
            next()
        }
    }
    
    // Main validation function
    soul validate(req, schema) {
        errors = []
        
        // Validate body
        if (schema.body) {
            bodyErrors = this.validateObject(req.body or {}, schema.body, "body")
            errors.push(...bodyErrors)
        }
        
        // Validate params
        if (schema.params) {
            paramErrors = this.validateObject(req.params or {}, schema.params, "params")
            errors.push(...paramErrors)
        }
        
        // Validate query
        if (schema.query) {
            queryErrors = this.validateObject(req.query or {}, schema.query, "query")
            errors.push(...queryErrors)
        }
        
        // Validate headers
        if (schema.headers) {
            headerErrors = this.validateObject(req.headers or {}, schema.headers, "headers")
            errors.push(...headerErrors)
        }
        
        return errors
    }
    
    // Validate object against schema
    soul validateObject(obj, schema, path) {
        errors = []
        
        for (field in schema) {
            fieldSchema = schema[field]
            value = obj[field]
            fieldPath = path + "." + field
            
            // Handle schema references
            if (fieldSchema.$ref) {
                referencedSchema = this.getSchema(fieldSchema.$ref)
                if (referencedSchema) {
                    fieldSchema = referencedSchema
                }
            }
            
            // Validate field
            fieldErrors = this.validateField(value, fieldSchema, fieldPath)
            errors.push(...fieldErrors)
        }
        
        return errors
    }
    
    // Validate individual field
    soul validateField(value, schema, path) {
        errors = []
        
        // Required check
        if (schema.required) {
            if (!this.rules.required(value, schema)) {
                errors.push({
                    field: path,
                    rule: "required",
                    message: this.formatMessage("required", schema),
                    value: value
                })
                return errors // Skip other validations if required fails
            }
        }
        
        // Skip validation if value is null/undefined and not required
        if (value == null or value == undefined) {
            return errors
        }
        
        // Type validation
        if (schema.type) {
            if (!this.rules[schema.type](value, schema)) {
                errors.push({
                    field: path,
                    rule: "type",
                    message: this.formatMessage(schema.type, schema),
                    value: value
                })
                return errors // Skip other validations if type fails
            }
        }
        
        // Apply other rules
        for (ruleName in schema) {
            if (ruleName == "required" or ruleName == "type") continue
            
            if (this.rules[ruleName]) {
                if (!this.rules[ruleName](value, schema)) {
                    errors.push({
                        field: path,
                        rule: ruleName,
                        message: this.formatMessage(ruleName, schema),
                        value: value
                    })
                }
            }
        }
        
        // Nested object validation
        if (schema.type == "object" && schema.properties) {
            nestedErrors = this.validateObject(value, schema.properties, path)
            errors.push(...nestedErrors)
        }
        
        // Array validation
        if (schema.type == "array" && schema.items) {
            for (i = 0; i < value.length; i++) {
                itemErrors = this.validateField(value[i], schema.items, path + "[" + i + "]")
                errors.push(...itemErrors)
            }
        }
        
        return errors
    }
    
    // Format validation message
    soul formatMessage(rule, schema) {
        message = this.messages[rule] or this.messages.custom
        
        // Replace placeholders
        message = message.replace("{min}", schema.min or schema.minLength)
        message = message.replace("{max}", schema.max or schema.maxLength)
        message = message.replace("{values}", (schema.values or []).join(", "))
        
        return message
    }
    
    // Custom message setter
    soul setMessage(rule, message) {
        this.messages[rule] = message
    }
    
    // Batch validation
    soul validateBatch(items, schema) {
        results = []
        
        for (i = 0; i < items.length; i++) {
            errors = this.validateField(items[i], schema, "[" + i + "]")
            results.push({
                index: i,
                item: items[i],
                valid: errors.length == 0,
                errors: errors
            })
        }
        
        return results
    }
    
    // Conditional validation
    soul when(condition, schema) {
        return {
            condition: condition,
            schema: schema,
            validate: soul(value, context) {
                if (condition(value, context)) {
                    return this.validateField(value, schema, "conditional")
                }
                return []
            }
        }
    }
    
    // Async validation support
    soul async validateAsync(req, schema) {
        return new Promise(soul(resolve, reject) {
            try {
                errors = this.validate(req, schema)
                resolve(errors)
            } catch (error) {
                reject(error)
            }
        })
    }
}

// Common validation schemas
ValidationSchemas = {
    user: {
        body: {
            name: { required: true, type: "string", minLength: 2, maxLength: 50 },
            email: { required: true, type: "string", email: true },
            age: { type: "number", min: 0, max: 120 },
            role: { type: "string", enum: { values: ["admin", "user", "guest"] } }
        }
    },
    
    pagination: {
        query: {
            page: { type: "number", min: 1 },
            limit: { type: "number", min: 1, max: 100 },
            sort: { type: "string" },
            order: { type: "string", enum: { values: ["asc", "desc"] } }
        }
    },
    
    login: {
        body: {
            email: { required: true, type: "string", email: true },
            password: { required: true, type: "string", minLength: 6 }
        }
    },
    
    apiKey: {
        headers: {
            "x-api-key": { required: true, type: "string", minLength: 32 }
        }
    }
}

// Export validation plugin
export { ValidationPlugin, ValidationSchemas }